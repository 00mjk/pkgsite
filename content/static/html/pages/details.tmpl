<!--
        Copyright 2019 The Go Authors. All rights reserved.
        Use of this source code is governed by a BSD-style
        license that can be found in the LICENSE file.
-->
{{define "main_content"}}
<div class="Container">
  {{$header := .Header}}
  {{$namespace := .Namespace}}
  <header class="DetailsHeader">
    <div class="DetailsHeader-breadcrumb">
      {{.BreadcrumbPath}}
    </div>
    <div class="DetailsHeader-main">
      <h1 class="DetailsHeader-title">{{.Title}}</h1>
      <div class="DetailsHeader-version">{{$header.Version}}</div>
      <div class="DetailsHeader-badge"
        data-version="{{$header.Version}}"
        {{ if eq $namespace "mod" -}}
          data-mpath="{{$header.Path}}"
          data-href="mod/{{$header.Path}}">
        {{- else -}}
          data-mpath="{{$header.Module.Path}}"
          data-ppath="{{$header.Path}}"
          data-href="{{$header.Path}}">
        {{- end }}
      </div>
    </div>
    <div class="InfoLabel">
      <span class="InfoLabel-title">Published:</span>
      <strong>{{$header.CommitTime}}</strong>
      <span class="InfoLabel-divider">|</span>
      <span class="InfoLabel-title">{{pluralize (len $header.Licenses) "License"}}: </span>
      <span>
        {{range $i, $e := $header.Licenses -}}{{if $i}}, {{end}}
          <a href="{{$header.URL}}?tab=licenses#{{.Anchor}}">{{$e.Type}}</a>
        {{- else -}}
          <span>None detected</span>
          <a href="/license-policy" class="Disclaimer-link"><em>not legal advice</em></a>
        {{- end}}
      </span>
      {{if eq $namespace "pkg"}}
        <span class="InfoLabel-divider">|</span>
        {{if eq $header.Module.Path "std"}}
          <a href="{{$header.Module.URL}}">Standard library</a>
        {{else}}
          <span class="InfoLabel-title">Module: </span>
          <span>
            <a href="{{$header.Module.URL}}">{{$header.Module.Path}}</a>
          </span>
        {{end}}
      {{end}}
    </div>
  </header>

  <nav class="DetailsNav js-modulesNav">
    <ul class="DetailsNav-list" role="tablist">
      {{range .Tabs}}
        <li class="{{if .Disabled}}DetailsNav-tabDisabled {{end}}DetailsNav-tab{{if eq .Name $.Settings.Name}} selected{{end}}" role="presentation">
          {{if .Disabled}}
            <a class="DetailsNav-link"
               role="tab"
               aria-selected="false"></a>
          {{else if eq .Name $.Settings.Name}}
            <a class="DetailsNav-link"
               role="tab"
               aria-selected="true">
          {{else}}
            <a class="DetailsNav-link"
               href="{{$header.URL}}?tab={{.Name}}"
               role="tab"
               aria-selected="false">
          {{end}}
          {{.DisplayName}}
          </a>
        </li>
      {{end}}
    </ul>
  </nav>

  <div class="DetailsContent">
    {{if .CanShowDetails -}}
      {{template "details_content" .Details}}
    {{- else}}
      <h2>“{{.Settings.DisplayName}}” hidden due to license restrictions.</h2>
    {{end}}
  </div>
</div>
{{end}}

{{define "post_content"}}
<script nonce="{{.Nonce}}">
const navEl = document.querySelector('.js-modulesNav');
const selectedEl = navEl.querySelector(`[aria-selected='true']`);
if (selectedEl.offsetLeft + selectedEl.offsetWidth > navEl.offsetWidth) {
  navEl.scrollLeft = selectedEl.offsetLeft;
}

const copyButton = document.querySelector('#DetailsHeader-copyPath');
if (copyButton) {
  copyButton.addEventListener('click', function(event) {
    event.preventDefault();
    const input = document.querySelector('#DetailsHeader-path');
    input.select();
    document.execCommand('copy');
    input.blur(); // prevents jump to focused element in some browsers
  });
}

async function latest() {
  const latestBadge = document.querySelector('.DetailsHeader-badge');
  let url = '/latest-version/' + latestBadge.getAttribute('data-mpath');
  const ppath = latestBadge.getAttribute('data-ppath');
  if (ppath) {
    url += '?pkg=' + ppath;
  }
  console.log(url);
  const res = await fetch(url);
  if (!res.ok) {
    // server-side error; do nothing
    return;
  }
  const latestVersion = await res.json();
  if (latestVersion === "") {
     // error; do nothing
  } else if (latestVersion === latestBadge.getAttribute('data-version')) {
    latestBadge.classList.add('DetailsHeader-latest');
    latestBadge.innerHTML = 'Latest';
  } else {
    latestBadge.classList.add('DetailsHeader-goToLatest');
    latestBadge.innerHTML = '<a href="/' + latestBadge.getAttribute('data-href') + '">Go to latest</a>';
  }
}

latest();

</script>

{{block "details_post_content" .}}{{end}}
{{end}}
