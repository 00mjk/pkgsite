// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package derrors implements some common error semantics to be used by other
// internal packages.
package derrors

import (
	"fmt"
	"net/http"
)

// ErrorType represents errors supported by the derrors package. It should
// only be used for test assertions.
type ErrorType uint32

// Enumerate error types in the derrors package.
const (
	NilErrorType ErrorType = iota
	NotFoundType
	InvalidArgumentType
	UncategorizedErrorType
)

func (t ErrorType) String() string {
	return [...]string{"nil", "Not Found", "Invalid Argument", "Uncategorized"}[t]
}

type dError struct {
	typ     ErrorType
	message string
}

func (e dError) Error() string {
	return e.typ.String() + ":" + e.message
}

// Type returns the ErrorType of err. If err was not generated by the derrors
// package, it returns UncategorizedErrorType.
func Type(err error) ErrorType {
	if err == nil {
		return NilErrorType
	}
	de, ok := err.(dError)
	if ok {
		return de.typ
	}
	return UncategorizedErrorType
}

// StatusError generates an error according to the HTTP semantics for the given
// status code. It uses the given format string and arguments to create the
// error string according to the fmt package.
//
// If HTTP semantics indicate success, it returns nil.
func StatusError(code int, format string, args ...interface{}) error {
	if code >= 200 && code < 300 {
		return nil
	}
	if code == http.StatusBadRequest {
		return InvalidArgument(format, args...)
	}
	if code == http.StatusNotFound || code == http.StatusGone {
		return NotFound(format, args...)
	}
	return fmt.Errorf(format, args...)
}

// Wrap wraps err, preserving its type if the wrapped error was generated by
// the derrors package. It uses the given format string and arguments to append
// to the error message according to the fmt package.
func Wrap(err error, format string, args ...interface{}) error {
	de, ok := err.(dError)
	msg := fmt.Sprintf(format, args...)
	de.message = fmt.Sprintf("%s: %v", msg, err)
	if !ok {
		de.typ = UncategorizedErrorType
	}
	return de
}

// NotFound creates a new error message that indicates the requested entity is
// not found.
func NotFound(format string, args ...interface{}) error {
	return dError{
		typ:     NotFoundType,
		message: fmt.Sprintf(format, args...),
	}
}

// IsNotFound reports whether err is a NotFound error.
func IsNotFound(err error) bool {
	de, ok := err.(dError)
	return ok && de.typ == NotFoundType
}

// InvalidArgument creates a new error that indicates the given arguments are
// invalid.
func InvalidArgument(format string, args ...interface{}) error {
	return dError{
		typ:     InvalidArgumentType,
		message: fmt.Sprintf(format, args...),
	}
}

// IsInvalidArgument reports whether err is an InvalidArguments error.
func IsInvalidArgument(err error) bool {
	de, ok := err.(dError)
	return ok && de.typ == InvalidArgumentType
}
